using System;
using System.Text;

namespace ML.USP.PriAtividade
{
    public sealed class GradienteDescente
    {
        /*
            A função ser otimiza:
            f(x1,x2) = 2*(x1 - 2)^2 + 2*(x2 - 3)^2;
         */

        // Hessiana feito na mão...
        double[,] hessiana = { { 4, 0 }, { 0, 4 } };

        public double[] CalculaGradienteDescente()
        {
            string printResult = string.Empty;
            double x0 = 0, x1 = 0;
            StringBuilder sb = new StringBuilder();
            double alfa = 0.1;
            decimal norma = 0;
            int i = 0;

            // Direção do Vetor
            double[] direcao = new double[2];

            double[] gradiente = CalculaGradiente(x0, x1);
            double result = CalculaFuncao(x0, x1);

            sb.AppendFormat("\nPasso: {0} -> x1: {1} . x2: {2} . Funcao: {3} --> dx1: {4}   dx2: {5}", i, x0, x1, result, gradiente[0], gradiente[1]);

            do
            {
                i += 1; //CONTADOR DE PASSOS

                //CALCULA A DIST�NCIA
                direcao = CalculaDistancia(gradiente);

                //NOVOS VALORES PARA x1 E x2
                x0 = Math.Round(x0 + (alfa * direcao[0]), 4);
                x1 = Math.Round(x1 + (alfa * direcao[1]), 4);

                //CALCULA A FUNCAO, GRADIENTE E A NORMA
                result = CalculaFuncao(x0, x1);
                gradiente = CalculaGradiente(x0, x1);

                // No calcula da norma, tive que utilizar duas casas decimais para conseguir convergi...
                double preCalcNorma = Math.Sqrt((Math.Pow(gradiente[0], 2)) + (Math.Pow(gradiente[1], 2)));
                norma = Math.Round(Convert.ToDecimal(preCalcNorma), 2);

                sb.AppendFormat("\nPasso: {0}-> x1: {1} . x2: {2} . Funcao: {3} --> dx1: {4}  .  dx2: {5}  .  Norma: {6}", 
                    i, Math.Round(x0, 2), Math.Round(x1, 2), result, gradiente[0], gradiente[1], norma);

            } while (norma >= Convert.ToDecimal(Math.Pow(10.0, -6.0)));


            printResult = sb.ToString();
            return gradiente;
        }


        private double CalculaFuncao(double x0, double x1)
        {
            return 2*((x0 - 2) * (x0 - 2)) + 2 * ((x1 - 3) * (x1 - 3));
        }

        private double[] CalculaGradiente(double x0, double x1)
        {
            double[] gradiente = new double[2];

            gradiente[0] = Math.Round(4 * (x0 - 2), 4);
            gradiente[1] = Math.Round(4 * (x1 - 3), 4);
            return gradiente;
        }

        private double[] CalculaDistancia(double[] grad)
        {
            double[] direcao = new double[2];

            //CALCULA A DIST�NCIA
            direcao[0] = grad[0] * -1;
            direcao[1] = grad[1] * -1;

            return direcao;
        }
    }
}
